import csv
import time
import smtplib
from sklearn.cluster import KMeans
import numpy as np

# Load firewall log data into a list of dictionaries
firewall_logs = []
with open("firewall.log", "r") as f:
    reader = csv.DictReader(f)
    for row in reader:
        firewall_logs.append(row)

# Real-time monitoring and alerts
while True:
    # Load new logs
    new_firewall_logs = []
    with open("firewall.log", "r") as f:
        reader = csv.DictReader(f)
        for row in reader:
            if row not in firewall_logs:
                new_firewall_logs.append(row)
    
    # Use a machine learning algorithm to identify patterns in the firewall logs
    data = np.array([[log['src_ip'], log['dst_ip'], log['port']] for log in firewall_logs + new_firewall_logs])
    kmeans = KMeans(n_clusters=5).fit(data)

    # Use the results of the clustering to categorize each log entry
    for i, log in enumerate(firewall_logs + new_firewall_logs):
        log['category'] = kmeans.labels_[i]

    # Check if there are any logs in the "High Risk" category
    high_risk_logs = [log for log in firewall_logs + new_firewall_logs if log['category'] == "High Risk"]
    if high_risk_logs:
        # Send an alert email
        subject = "High Risk Firewall Logs Alert"
        body = "There are new high risk firewall logs:\n" + "\n".join([str(log) for log in high_risk_logs])
        message = f"Subject: {subject}\n\n{body}"
        with smtplib.SMTP("smtp.gmail.com", 587) as server:
            server.ehlo()
            server.starttls()
            server.login("sender_email_address", "sender_email_password")
            server.sendmail("sender_email_address", "receiver_email_address", message)

    # Write the categorized logs back to a file
    firewall_logs = firewall_logs + new_firewall_logs
    with open("categorized_firewall_logs.csv", "w") as f:
        writer = csv.DictWriter(f, fieldnames=["src_ip", "dst_ip", "port", "category"])
        writer.writeheader()
        for log in firewall_logs:
            writer.writerow(log)
    
    # Wait for 5 minutes before checking for new logs again
    time.sleep(300)
